// Probably copy the CheckCommand verbatim. Do what you will
// with the service and host objects.

object Host "Nest" {
  check_command = "dummy"
}

object CheckCommand "nest-thermostat" {
  import "plugin-check-command"
  command = [ PluginContribDir + "/check_nest_thermostat.py" ]
  arguments = {
    "-c" = {
      value = "$nest_config_file$"
      description = "Path to file with OAuth token (defaults to ./config.yaml)"
    }
    "-u" = {
      value = "$nest_temp_units$"
      description = "Celcius or Faherenheit (as C/F), defaults to Nest setting."
    }
    "-s" = {
      value = "$nest_structure$"
      description = "The name of this structure (e.g. Home), defaults to the first one it finds."
    }
    "-n" = {
      value = "$nest_thermostat$"
      description = "The name of this thermostat (e.g. Living Room), defaults to the first one it finds."
    }
    "-w" = {
      value = "$nest_weather$"
      description = "Specify a plugin for outdoor weather details (e.g., openweathermap)."
    }
  }
  // set default
  vars.nest_config_file = PluginContribDir + "/config.yaml"
}

apply Service "Home Temperatures" {
  import "generic-service"

  check_command = "nest-thermostat"
  check_interval = 1m
  // weathergov, openweathermap, or whatever simple weather script you have
  vars.nest_weather = "weathergov"
  // wherever you want it
  vars.nest_config_file = "/etc/icinga2/conf.d/nest_config.yaml"

  assign where host.name == "Nest"
}